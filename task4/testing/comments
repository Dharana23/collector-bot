#include <math.h> //included to support power function

#define sbit(reg,bit)	reg |= (1<<bit)			// Macro defined for Setting a bit of any register.

#define cbit(reg,bit)	reg &= ~(1<<bit)		// Macro defined for Clearing a bit of any register.

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
}

  cbit(lcd_port,RS);				//RS=0 --- Command Input
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
	lcd_port = 0x30;				  //Sending 3
	sbit(lcd_port,EN);				//Set Enable Pin
	_delay_ms(5);					    //Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
  
  cbit(lcd_port,RS);				//RS=0 --- Command Input
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
	lcd_port = 0x30;				  //Sending 3
	sbit(lcd_port,EN);				//Set Enable Pin
	_delay_ms(5);					    //Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
  
  cbit(lcd_port,RS);				//RS=0 --- Command Input
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
	lcd_port = 0x30;				  //Sending 3
	sbit(lcd_port,EN);				//Set Enable Pin
	_delay_ms(5);					    //Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
  
  cbit(lcd_port,RS);				//RS=0 --- Command Input
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
	lcd_port = 0x20;				  //Sending 2 to initialise LCD 4-bit mode
	sbit(lcd_port,EN);				//Set Enable Pin
	_delay_ms(1);					    //Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
  
  //Function to Initialize LCD
void lcd_init()

lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.

//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)

//Function to Write Data on LCD
void lcd_wr_char(char letter)

//Function to bring cursor at home position
void lcd_home()

//Function to Print String on LCD
void lcd_string(char *str)

//Position the LCD cursor at "row", "column".
void lcd_cursor (char row, char column)

//Function To Print Any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)

//ADC pin configuration
void adc_pin_config (void)

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 

 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
 
 //Function to Initialize PORTS
void port_init()


	TCCR5B = 0x00;	//Stop
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
  
  ADCSRB = 0x00;		//MUX5 = 0
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
  
  ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
  
  //Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 

ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
  
  ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
  
  //Function To Print Sensor Values At Desired Row And Column Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)

//Function used for setting motor's direction
void motion_set (unsigned char Direction)

 Direction &= 0x0F; 		// removing upper nibble for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
 PortARestore &= 0xF0; 		// making lower direction nibble to 0
 PortARestore |= Direction; // adding lower nibble for forward command and restoring the PORTA status
 PORTA = PortARestore; 		// executing the command
 
 void back (void) //both wheels backward
 
 void left (void) //Left wheel backward, Right wheel forward
 
 void right (void) //Left wheel forward, Right wheel backward
 
 void soft_left (void) //Left wheel stationary, Right wheel forward
 
 void soft_right (void) //Left wheel forward, Right wheel is stationary
 
 void soft_left_2 (void) //Left wheel backward, right wheel stationary
 
 void soft_right_2 (void) //Left wheel stationary, Right wheel backward
 
 void fwd_wls(void) // function required the robot needs to move a short distance forward
 
 void dash() // function to cross the zig zag path of the arena
 
 void boom(void) // function used to decide where to go after pick up
 
 void zap() // function to check nodes for zig zag path and wall on the arena
 
 void fwd(void) // function for straight forward movement of the bot
 
 void white_line(void) // function to cross white line of the arena
                       // white line reads value 5 or greater then 5
                       // black lines reads value 4 or less than 4


void zoom(void) // function to know the position of the house where the material needs to be placed

void bam(void) // function to govern the movement by calling other functions one by one

//Main Function
int main()
