#define  F_CPU 14745600
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = 0x0F;
 PORTA = 0x00;
 DDRL|= 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
 PORTL|=0x18; //PL3 and PL4 pins are for velocity control using PWM.
}

//Function to initialize ports
void init_ports()
{
 motion_pin_config();
}

// Timer 5 initialized in PWM mode for velocity control
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
	OCR5BL = (unsigned char)right_motor;
}

//Function used for setting motor's direction



void forward (void) //both wheels forward
{
  PORTA|=~0x05;
}
void backward()
{
	velocity(255,250);
	PORTA|=~0x0A;
}
void right_turn()
{

	PORTA=0x06;
}
void left_turn()
{
	
	PORTA=0x09;
}
void buzzer()
{
	DDRB=0x00;
	PORTB=0x01;
}


void stop (void)
{
  PORTA&=0x00;
  PORTB&=0x00;
}

void init_devices (void) //use this function to initialize all devices
{
 cli(); //disable all interrupts
 init_ports();
 timer5_init();
 sei(); //re-enable interrupts
}

//Main Function
int main()
{
	init_devices();
	velocity(100,150);
 	while(1)
	{
	
		backward();
		_delay_ms(500);
		/*right_turn();
		_delay_ms(500);
		stop();
		_delay_ms(500);
		forward();
		_delay_ms(1500);
		stop();
		_delay_ms(500);
		left_turn();
		_delay_ms(500);
		stop();
		_delay_ms(500);
		forward();
		_delay_ms(1500);
		stop();
		_delay_ms(500);
	    backward();
		_delay_ms(1500);
		stop();
		_delay_ms(500);
		buzzer();
		stop();*/
		
	}
}
